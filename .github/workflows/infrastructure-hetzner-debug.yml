name: Deploy Infrastructure (Hetzner) - Debug

on:
  workflow_dispatch:

# Prevent concurrent Terraform operations
concurrency:
  group: terraform-state-debug
  cancel-in-progress: false

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: infrastructure
    defaults:
      run:
        working-directory: infra/terraform/hetzner

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      - name: Debug - Check Action Path
        run: |
          echo "=== Checking action paths ==="
          ls -la ../../../.github/actions/
          ls -la ../../../.github/actions/debug-terraform-env/ || echo "Debug action not found"
          cat ../../../.github/actions/debug-terraform-env/action.yml || echo "Cannot read debug action"

      - name: Setup Terraform Environment (Debug)
        uses: ./.github/actions/debug-terraform-env
        with:
          op-service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Verify Environment After Setup
        run: |
          echo "=== Verifying environment variables ==="

          # Check if critical env vars are set
          for var in TERRAFORM_S3_ENDPOINT AWS_ACCESS_KEY_ID; do
            if [ -z "${!var}" ]; then
              echo "❌ $var is not set"
            else
              echo "✅ $var is set"
            fi
          done

          # Check working directory
          echo ""
          echo "=== Working directory contents ==="
          pwd
          ls -la

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (with debug)
        run: |
          echo "=== Terraform Init Debug ==="
          echo "S3 Endpoint: ${TERRAFORM_S3_ENDPOINT:-NOT SET}"
          echo "AWS Access Key ID present: $([[ -n "$AWS_ACCESS_KEY_ID" ]] && echo "Yes" || echo "No")"
          
          # Debug: List all environment variables starting with TERRAFORM or AWS
          echo ""
          echo "=== Terraform/AWS Environment Variables ==="
          env | grep -E '^(TERRAFORM|AWS)' | grep -v SECRET | sort || echo "No TERRAFORM/AWS vars found"
          
          # Check if endpoint is in env context
          echo ""
          echo "GitHub env TERRAFORM_S3_ENDPOINT: ${{ env.TERRAFORM_S3_ENDPOINT }}"
          
          # Initialize without -debug flag (not valid for init)
          terraform init \
            -backend-config="endpoint=${TERRAFORM_S3_ENDPOINT}"

      - name: Terraform Plan
        if: success()
        run: |
          terraform plan \
            -var="github_username=${{ github.repository_owner }}"
