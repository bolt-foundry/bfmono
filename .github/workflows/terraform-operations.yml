name: Terraform Operations

on:
  workflow_dispatch:
    inputs:
      operation:
        description: "Terraform operation to perform"
        required: true
        type: choice
        options:
          - plan
          - state-list
          - state-show
          - refresh
          - destroy
      terraform_args:
        description: "Additional arguments for the terraform command"
        required: false
        type: string
      confirm_destroy:
        description: 'Type "destroy-production" to confirm destruction'
        required: false
        type: string

# Prevent concurrent Terraform operations
concurrency:
  group: terraform-state
  cancel-in-progress: false

jobs:
  terraform-operation:
    runs-on: ubuntu-latest
    environment: infrastructure
    defaults:
      run:
        working-directory: infra/terraform/hetzner

    steps:
      - name: Validate destroy operation
        if: inputs.operation == 'destroy'
        run: |
          if [ "${{ inputs.confirm_destroy }}" != "destroy-production" ]; then
            echo "‚ùå Destroy operation requires confirmation"
            echo "Please type 'destroy-production' in the confirm field"
            exit 1
          fi

      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: DeterminateSystems/nix-installer-action@main
        with: { determinate: true }

      # - uses: DeterminateSystems/flakehub-cache-action@main  # Disabled FlakeHub caching

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Execute Terraform Operation
        run: |
          nix develop --accept-flake-config --command bash -euc "
            # Sync all variables from 1Password
            export OP_SERVICE_ACCOUNT_TOKEN='${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}'
            bft sitevar sync --force

            # Source both config and secrets
            source .env.config
            source .env.secrets

            # Map to Terraform variable names (required for TF to recognize them)
            export TF_VAR_hcloud_token=\$HETZNER_API_TOKEN
            export TF_VAR_cloudflare_api_token=\$CLOUDFLARE_API_TOKEN
            export TF_VAR_cloudflare_zone_id=\$CLOUDFLARE_ZONE_ID
            export TF_VAR_cloudflare_zone_id_promptgrade=\$CLOUDFLARE_ZONE_ID_PROMPTGRADE
            export TF_VAR_ssh_public_key=\$SSH_PUBLIC_KEY
            export TF_VAR_hyperdx_api_key=\$HYPERDX_API_KEY
            export TF_VAR_s3_access_key=\$AWS_ACCESS_KEY_ID
            export TF_VAR_s3_secret_key=\$AWS_SECRET_ACCESS_KEY
            export TF_VAR_github_token=\$GITHUB_PERSONAL_ACCESS_TOKEN
            export TF_VAR_hetzner_project_id=\$HETZNER_PROJECT_ID
            export TF_VAR_s3_endpoint=\$S3_ENDPOINT
            export TF_VAR_github_username='${{ github.repository_owner }}'

            # Override AWS creds for backend (uses CI project, not production)
            export AWS_ACCESS_KEY_ID=\$TERRAFORM_BACKEND_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=\$TERRAFORM_BACKEND_SECRET_ACCESS_KEY

            # Run Terraform
            cd infra/terraform/hetzner
            terraform init -backend-config=\"endpoint=\${TERRAFORM_BACKEND_ENDPOINT:-\$S3_ENDPOINT}\"

            # Execute requested operation
            case '${{ inputs.operation }}' in
              plan)
                terraform plan ${{ inputs.terraform_args }}
                ;;
              state-list)
                terraform state list ${{ inputs.terraform_args }}
                ;;
              state-show)
                terraform state show ${{ inputs.terraform_args }}
                ;;
              refresh)
                terraform refresh ${{ inputs.terraform_args }}
                ;;
              destroy)
                terraform destroy -auto-approve ${{ inputs.terraform_args }}
                ;;
              *)
                echo 'Unknown operation: ${{ inputs.operation }}'
                exit 1
                ;;
            esac
          "
