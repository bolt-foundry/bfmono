name: Deploy boltfoundry-com

on:
  push:
    branches: [main]
    paths:
      - "apps/boltfoundry-com/**"
      - "infra/terraform/hetzner/**"
  workflow_dispatch:

# Prevent concurrent Terraform operations
concurrency:
  group: terraform-state
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: DeterminateSystems/nix-installer-action@main
      # - uses: DeterminateSystems/flakehub-cache-action@main  # Disabled FlakeHub caching

      - name: Build binary and sync production env
        run: |
          nix develop .#production --accept-flake-config --command bash -c "
            # Sync environment variables from vault accessible by service account
            # The OP_SERVICE_ACCOUNT_TOKEN determines which vault is used
            if [ -n \"${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}\" ]; then
              bft sitevar sync --force
            fi
            # Build the binary
            bft compile boltfoundry-com
          "
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker image
        run: |
          # Build with git hash and latest tags
          docker build \
            -t ghcr.io/${{ github.repository_owner }}/boltfoundry-com:${{ github.sha }} \
            -f infra/Dockerfile.deploy \
            --build-arg BINARY_PATH=build/boltfoundry-com \
            --build-arg BINARY_NAME=boltfoundry-com \
            .
          docker tag ghcr.io/${{ github.repository_owner }}/boltfoundry-com:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/boltfoundry-com:latest
          docker push ghcr.io/${{ github.repository_owner }}/boltfoundry-com:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/boltfoundry-com:latest

      - name: Setup SSH
        run: |
          nix develop .#production --accept-flake-config --command bash -euc "
            # Source secrets to get SSH_PRIVATE_KEY from 1Password
            source .env.secrets
            
            # Setup SSH directory and key
            mkdir -p ~/.ssh
            echo \"\$SSH_PRIVATE_KEY\" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            # Note: ssh-keyscan will be done after we have the server IP
          "

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Sync secrets and generate Kamal config from Terraform state
        run: |
          # First sync secrets from 1Password
          nix develop .#production --accept-flake-config --command bash -euc "
            export OP_SERVICE_ACCOUNT_TOKEN='${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}'
            
            # Sync all secrets to .env.secrets
            bft sitevar sync --force
            
            # Source the secrets
            source .env.secrets
            
            # Export variables for Terraform
            export TF_VAR_hcloud_token=\$HETZNER_API_TOKEN
            export TF_VAR_cloudflare_api_token=\$CLOUDFLARE_API_TOKEN
            export TF_VAR_cloudflare_zone_id=\$CLOUDFLARE_ZONE_ID
            export TF_VAR_ssh_public_key=\$SSH_PUBLIC_KEY
            export TF_VAR_hyperdx_api_key=\$HYPERDX_API_KEY
            export TF_VAR_s3_access_key=\$AWS_ACCESS_KEY_ID
            export TF_VAR_s3_secret_key=\$AWS_SECRET_ACCESS_KEY
            export TF_VAR_github_token=\$GITHUB_PERSONAL_ACCESS_TOKEN
            export TF_VAR_hetzner_project_id=\$HETZNER_PROJECT_ID
            export TF_VAR_s3_endpoint=\$S3_ENDPOINT
            
            # Use CI credentials for Terraform backend
            export AWS_ACCESS_KEY_ID=\$TERRAFORM_BACKEND_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=\$TERRAFORM_BACKEND_SECRET_ACCESS_KEY
            
            # Get server IP from Terraform state (read-only operation)
            cd infra/terraform/hetzner
            # Map backend endpoint to S3 endpoint for consistency
            export TERRAFORM_S3_ENDPOINT=\$TERRAFORM_BACKEND_ENDPOINT
            terraform init -backend-config=\"endpoint=\$TERRAFORM_S3_ENDPOINT\"
            
            # Just read the floating IP from state, don't modify anything
            FLOATING_IP=\$(terraform output -raw server_ip 2>/dev/null || echo '')
            
            if [ -z \"\$FLOATING_IP\" ]; then
              echo \"❌ Could not get server IP from Terraform state\"
              echo \"\"
              echo \"This usually means the infrastructure hasn't been deployed yet.\"
              echo \"Please ensure the infrastructure workflow has run successfully first:\"
              echo \"  1. Go to Actions → Deploy Infrastructure (Hetzner)\"
              echo \"  2. Click 'Run workflow' and deploy the infrastructure\"
              echo \"  3. Once successful, re-run this deployment workflow\"
              echo \"\"
              echo \"Alternatively, if infrastructure was recently destroyed, you'll need to redeploy it first.\"
              exit 1
            fi
            
            # Store the IP for the deployment step
            echo \"BOLTFOUNDRY_COM_SERVER_IP=\$FLOATING_IP\" >> .env.secrets
            
            # Add server to known_hosts now that we have the IP
            ssh-keyscan -H \$FLOATING_IP >> ~/.ssh/known_hosts
          "

      - name: Install Kamal
        run: sudo gem install kamal --version 2.7.0 --no-document

      - name: Deploy with Kamal
        run: |
          # Sync production secrets from 1Password and generate Kamal config
          nix develop .#production --accept-flake-config --command bash -c "
            export OP_SERVICE_ACCOUNT_TOKEN='${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}'
            
            # Sync all secrets from 1Password
            bft sitevar sync --force --secret-only
            
            # Generate Kamal config dynamically based on available secrets
            bft generate-kamal-config infra/terraform/hetzner/deploy.yml.tpl config/deploy.yml production
            
            # Create .env file for Kamal with production secrets
            cp .env.secrets .env
          "
          
          # Create .kamal directory and secrets file for Kamal 2.x
          mkdir -p .kamal
          echo "GITHUB_TOKEN=${KAMAL_REGISTRY_PASSWORD}" > .kamal/secrets
          chmod 600 .kamal/secrets

          # Deploy with Kamal 2.x (will use .env for secret environment variables)
          kamal deploy
        env:
          KAMAL_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
        working-directory: ./

      - name: Validate deployment health
        run: |
          echo "🔍 Validating deployment health..."

          # Wait for deployment to stabilize
          echo "⏳ Waiting for deployment to stabilize..."
          sleep 30

          # Health check with retries
          echo "🩺 Testing health endpoint..."
          for i in {1..60}; do
            if curl -f -L -s https://boltfoundry.com/ > /dev/null 2>&1; then
              echo "✅ Health endpoint responded successfully"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "❌ Health endpoint failed after 60 attempts (10 minutes)"
              echo "🔄 Attempting rollback..."
              kamal rollback --version=latest || echo "⚠️ Rollback command failed"
              exit 1
            fi
            echo "Health check attempt $i/60 failed, retrying in 10s..."
            sleep 10
          done

          # Test main page endpoint
          echo "🏠 Testing main page endpoint..."
          for i in {1..10}; do
            response_code=$(curl -L -s -o /dev/null -w "%{http_code}" https://boltfoundry.com/)
            if [ "$response_code" = "200" ]; then
              echo "✅ Main page responded with 200 OK"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "❌ Main page failed with response code: $response_code"
              echo "🔄 Attempting rollback..."
              kamal rollback --version=latest || echo "⚠️ Rollback command failed"
              exit 1
            fi
            echo "Main page attempt $i/10 failed (response: $response_code), retrying in 10s..."
            sleep 10
          done

          # Enhanced health check - get detailed health info
          echo "🔬 Performing detailed health check..."
          health_response=$(curl -L -s https://boltfoundry.com/)
          if echo "$health_response" | grep -q 'html\|HTML'; then
            echo "✅ Detailed health check passed"
            echo "Health response contains HTML content"
          else
            echo "❌ Detailed health check failed - invalid response format"
            echo "Response: $health_response"
            echo "🔄 Attempting rollback..."
            kamal rollback || echo "⚠️ Rollback command failed"
            exit 1
          fi

          echo "🎉 Deployment validation successful!"

      - name: Monitor post-deployment stability
        run: |
          echo "👀 Monitoring deployment stability for 2 minutes..."

          # Monitor for 2 minutes to catch early failures
          for i in {1..12}; do
            response_code=$(curl -L -s -o /dev/null -w "%{http_code}" https://boltfoundry.com/)
            if [ "$response_code" != "200" ]; then
              echo "❌ Stability check failed with response code: $response_code at check $i/12"
              echo "🔄 Attempting rollback..."
              kamal rollback --version=latest || echo "⚠️ Rollback command failed"
              exit 1
            fi
            echo "✅ Stability check $i/12 passed (response: $response_code)"
            sleep 10
          done

          echo "🎯 Deployment is stable and healthy!"

      - name: Deployment success notification
        if: success()
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "✅ Service URL: https://boltfoundry.com"
          echo "✅ Health Check: https://boltfoundry.com/"
          echo "✅ Deployment validated and stable"

      - name: Deployment failure notification
        if: failure()
        run: |
          echo "💥 Deployment failed!"
          echo "❌ Service may be unresponsive at: https://boltfoundry.com"
          echo "🔍 Check logs above for specific failure reason"
          echo "⚠️ Manual intervention may be required"
